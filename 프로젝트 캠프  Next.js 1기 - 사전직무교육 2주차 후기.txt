#### 1.  2주차 회고

메모이제이션, Reducer, Comtext, nodemon으로 server 이용, zustand를 사용하는법, 그리고 NEXTJS의 기초적인 부분에 대해 공부.
zustand와 NEXT는 조금 공부해봐서 바로 이해가 되는 부분이 있었지만, Reducer와 Context는 제대로 응용이나 가능할까 싶다.

메모이제이션으로
useCallback() -> 함수를 메모이제이션
useMemo() -> 특정 값 자체를 메모이제이션
React.Memo() -> 컴포넌트 자체를 메모이제이션 하여 사용하며
이 3가지를 상황에 맞게 잘 사용해야 성능이 저하되지 않을 수 있다.

Reducer 코드로는
```typescript
import { useReducer, useState } from "react";
import ExampleOne from "./components/ExampleOne";
import ExampleTwo from "./components/ExampleTwo";

// dispatch()에 작성한 매개변수가 action으로 들어간다!
const reducer = (state: number, action: any) => {
  // 상태 관리 로직
  switch (action.type) {
    case "sucoding":
      return state + action.payload;
    case "snifer":
      return state + action.payload;
  }

  return state;
};

// const useReducer = (callback, initialState) => {
//   // .....
//   callback(initialState, action);
// };
function App() {
  const [count, setCount] = useState(0);
  const [state, dispatch] = useReducer(reducer, 0);

  return (
    <>
      <h1>Reducer State : {state}</h1>
      <button
        onClick={() => {
          dispatch({ type: "sucoding", payload: 10 });
        }}
      >
        버튼
      </button>
      <ExampleOne count={count} setCount={setCount} />
      <ExampleTwo count={count} setCount={setCount} />
    </>
  );
}

export default App;

```
```typescript
import { useReducer, useState } from "react";
import ExampleOne from "./components/ExampleOne";
import ExampleTwo from "./components/ExampleTwo";

export type ReducerAction = {
  type: string;
  payload: number;
};

// dispatch()에 작성한 매개변수가 action으로 들어간다!
const reducer = (state: number, action: ReducerAction) => {
  // 상태 관리 로직
  switch (action.type) {
    case "+":
      return state + action.payload;
    case "-":
      return state - action.payload;
    default:
      return state;
  }
  return state;
};
function App() {
  // const [count, setCount] = useState(0);
  const [count, dispatch] = useReducer(reducer, 0);

  return (
    <>
      <ExampleOne count={count} dispatch={dispatch} />
      <ExampleTwo count={count} dispatch={dispatch} />
    </>
  );
}
```
```typescript
export default App;
// --------
import { ReducerAction } from "../App";

type ExampleOneProps = {
  //   setCount: React.Dispatch<React.SetStateAction<number>>;
  count: number;
  dispatch: React.Dispatch<ReducerAction>;
};

const ExampleOne = (props: ExampleOneProps) => {
  const { count, dispatch } = props;

  return (
    <>
      <h1>ExampleOne Component : {count}</h1>
      <button onClick={() => dispatch({ type: "+", payload: 1 })}>증가</button>
      <button onClick={() => dispatch({ type: "-", payload: 1 })}>감소</button>
    </>
  );
};

export default ExampleOne;

```

로 reducer, dispatch는 다시한번 공부해야 겠다.

----
Zustand의 기본적인 코드는
```typescript
import { create } from "zustand";

const useCountStore = create((set) => ({
  count: 0,
  increment: () => set({}),
}));
```
이며 이를 이렇게 사용한다.
```typescript
import { create } from "zustand";
// import { v4 as uuidv4 } from "uuid";
import axios from "axios";
export type TTodo = {
  id: string;
  text: string;
  completed: boolean;
};

type TodoStoreType = {
  todos: TTodo[];
  addTodo: (text: string) => void;
  toggleTodo: (id: string) => void;
  removeTodo: (id: string) => void;
};

export const useTodoStore = create<TodoStoreType>((set) => ({
  todos: [],

  addTodo: async (text) => {
    // api call
    const response = await axios.post("http://localhost:4000/todos", { text });
    set((state) => ({
      todos: [...state.todos, response.data],
    }));
  },
  toggleTodo: (id) => {
    //api call
    set((state) => ({
      todos: state.todos.map((todo) =>
        todo.id === id ? { ...todo, completed: !todo.completed } : todo
      ),
    }));
  },
  removeTodo: (id) => {
    // api call
    set((state) => ({
      todos: state.todos.filter((todo) => todo.id !== id),
    }));
  },
}));

```
```
import { useTodoStore } from "../stores/todoStore";
import TodoListItem from "./TodoListItem";
const TodoList = () => {
  const todos = useTodoStore((state) => state.todos);

  return (
    <>
      <ul className="flex flex-col gap-4 mt-4">
        {todos &&
          todos.map((todo) => <TodoListItem key={todo.id} todo={todo} />)}
      </ul>
    </>
  );
};
export default TodoList;
```

NextJS를 배우면서, 다이나믹 루트나 layout의 적용등은 알고 있었지만, catch all segment(포괄적경로)나 _를 붙이는 프라이빗 폴더, 소괄호로 그룹을 지정하는 것등, 새롭게 배우는 것도 있었다.

Next는 server component와 client component가 2번 렌더링 되는데, server component가 렌더링한 정적 html파일에 client에서 렌더링한 자바스크립트 기능을 적용하는 과정을 hydration이라고 한다.
